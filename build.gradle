plugins {
  id 'application'
  id 'idea'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.1.6'
  id 'org.springframework.boot' version '3.3.5'
  id 'se.patrikerdes.use-latest-versions' version '0.2.18'
  id 'com.github.ben-manes.versions' version '0.51.0'
  id 'org.sonarqube' version '6.0.1.5171'
  id 'uk.gov.hmcts.java' version '0.12.63'
  id 'com.github.spacialcircumstances.gradle-cucumber-reporting' version '0.1.25'
  id 'au.com.dius.pact' version '4.2.21'
  id 'com.github.hmcts.rse-cft-lib' version '0.19.1453'
  id 'org.owasp.dependencycheck' version '11.1.0'
}

group = 'uk.gov.hmcts.reform'
version = '0.0.1'
//2.10.5 and 2.12.2!!
java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(21)
  }
}

application {
  mainClass = 'uk.gov.hmcts.reform.hmc.Application'
}

configurations {
  contractTestCompile.extendsFrom(testCompile)
  contractTestRuntime.extendsFrom(testRuntime)
  cftlibRuntimeClasspath.extendsFrom(runtimeClasspath)

  all {
    exclude group: 'org.codehaus.groovy'  
  }
}

configurations.configureEach {
  tasks.withType(Copy).configureEach {
    duplicatesStrategy 'exclude'
  }
}

sourceSets {
  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }

  contractTest {
    java {
      srcDir('src/contractTest/java')
      compileClasspath += main.output
      runtimeClasspath += main.output
    }
    resources {
      srcDir('src/contractTest/resources')
    }
  }

  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }
}

idea {
  module {
    // config to allow Intellij to mark test source and resource files correctly to help linting tools
    testSourceDirs += project.sourceSets.functionalTest.java.srcDirs
    testSourceDirs += project.sourceSets.integrationTest.java.srcDirs
    testResourceDirs += project.sourceSets.functionalTest.resources.srcDirs
    testResourceDirs += project.sourceSets.integrationTest.resources.srcDirs
  }
}


tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

tasks.withType(Test) {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
  }
}

test {
  generateCucumberReports.enabled = false
  failFast = true
}

task functional(type: Test) {
  description = "Runs functional tests"
  group = "Verification"
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath

  generateCucumberReports.enabled = false

  doLast {
    generateCucumberReports.enabled = true

    javaexec {
      environment "OAUTH2_CLIENT_SECRET", "DUMMY"
      main = "uk.gov.hmcts.reform.hmc.hmi.befta.CftHearingServiceBeftaMain"
      classpath += sourceSets.functionalTest.runtimeClasspath + sourceSets.main.output + sourceSets.test.output
      args = [
        '--threads', '10',
        '--plugin', "json:${rootDir}/target/cucumber.json",
        '--plugin', "junit:${buildDir}/test-results/functional/cucumber.xml",
        '--tags', 'not @Ignore',
        '--glue', 'uk.gov.hmcts.befta.player', 'src/functionalTest/resources/features'
      ]
      // '--add-opens=...' added to suppress 'WARNING: An illegal reflective access operation has occurred' in uk.gov.hmcts.befta.util.CucumberStepAnnotationUtils
      jvmArgs = [ '--add-opens=java.base/java.lang.reflect=ALL-UNNAMED' ]
    }
  }

  finalizedBy {
    generateCucumberReports {
      doLast{
        delete "${rootDir}/BEFTA Report for Functional Tests/"
        new File("${rootDir}/BEFTA Report for Functional Tests").mkdirs()
        file("${rootDir}/target/cucumber/cucumber-html-reports").renameTo(file("${rootDir}/BEFTA Report for Functional Tests"))
        logger.quiet("Functional test report moved to ---> file://${rootDir}/BEFTA%20Report%20for%20Functional%20Tests/overview-features.html")
      }
    }
  }
  outputs.upToDateWhen { false }
}

task integration(type: Test) {
  description = "Runs integration tests"
  group = "Verification"
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  failFast = true
}

task smoke(type: Test) {
  description = 'Executes smoke tests against an the HMC CFT Hearing Service API instance just deployed'
  dependsOn functionalTestClasses

  new File("$buildDir/test-results/test").mkdirs()
  copy {
    from "src/functional/resources/DummyTest.xml"
    into "$buildDir/test-results/test"
  }

  doLast {
    generateCucumberReports.enabled = true
    javaexec {
      environment "OAUTH2_CLIENT_SECRET", "DUMMY"
      main = "uk.gov.hmcts.reform.hmc.hmi.befta.CftHearingServiceBeftaMain"
      classpath += sourceSets.functionalTest.runtimeClasspath + sourceSets.main.output + sourceSets.test.output
      args = [
        '--threads', '10',
        '--plugin', "json:${rootDir}/target/cucumber.json",
        '--plugin', "junit:${buildDir}/test-results/functional/cucumber.xml",
        '--tags', '@Smoke and not @Ignore',
        '--glue', 'uk.gov.hmcts.befta.player', 'src/functionalTest/resources/features'
      ]
      // '--add-opens=...' added to suppress 'WARNING: An illegal reflective access operation has occurred' in uk.gov.hmcts.befta.util.CucumberStepAnnotationUtils
      jvmArgs = [ '--add-opens=java.base/java.lang.reflect=ALL-UNNAMED' ]
    }
  }

  finalizedBy {
    generateCucumberReports {
      doLast{
        delete "${rootDir}/BEFTA Report for Smoke Tests/"
        new File("${rootDir}/BEFTA Report for Smoke Tests").mkdirs()
        file("${rootDir}/target/cucumber/cucumber-html-reports").renameTo(file("${rootDir}/BEFTA Report for Smoke Tests"))

        logger.quiet("Smoke test report moved to ---> file://${rootDir}/BEFTA%20Report%20for%20Smoke%20Tests/overview-features.html")
      }
    }
  }

  outputs.upToDateWhen { false }
}

task customCleanBeftaReports(type:Delete) {
  delete "${rootDir}/BEFTA Report for Smoke Tests/"
  delete "${rootDir}/BEFTA Report for Functional Tests/"
  delete "${rootDir}/target/cucumber"
  delete "${rootDir}/target/cucumber.json"
}
tasks.clean.dependsOn(tasks.customCleanBeftaReports)

jacocoTestReport {
  executionData(test, integration)
  reports {
    xml.required = true
    csv.required = false
    xml.outputLocation = file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }
}

project.tasks['sonarqube'].dependsOn jacocoTestReport

sonarqube {
  properties {
    property "sonar.projectName", "Reform :: hmc-cft-hearing-service"
    property "sonar.projectKey", "uk.gov.hmcts.reform:hmc-cft-hearing-service"
    property "sonar.coverage.jacoco.xmlReportPaths", "${jacocoTestReport.reports.xml.outputLocation}"
    property "sonar.exclusions", "src/main/java/uk/gov/hmcts/reform/hmc/Application.java," +
      "**/config/SecurityConfiguration.java," +
      "src/main/java/uk/gov/hmcts/reform/hmc/config/MessageReaderFromQueueConfiguration.java," +
      "src/main/java/uk/gov/hmcts/reform/hmc/config/MessageSenderToTopicConfiguration.java," +
      "src/main/java/uk/gov/hmcts/reform/hmc/config/MessageSenderToQueueConfiguration.java," +
      "src/main/java/uk/gov/hmcts/reform/hmc/data/MaxHearingRequestVersionView.java"
  }
}

ext {
  set('springCloudVersion', '2023.0.3')
  set('spring-framework.version', '6.1.14')
  set('spring-security.version', '6.3.4')
  set('snakeyaml.version', '2.3')
  set('jackson.version', '2.18.1')
  set('diuspactproviderVersion', '4.1.43')

  junit                 = '5.10.5'
  junitPlatform         = '1.10.5'
  lombok                = '1.18.34'
  mapstruct             = '1.4.2.Final'
  azureInsightsVersion  = '2.4.1'
  testcontainers        = '1.16.3'
  pactVersion           = getCheckedOutGitCommitHash()
}

// before committing a change, make sure task still works
dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf { selection -> // <---- notice how the closure argument is named
    return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
  }
}

apply from: './gradle/suppress.gradle'
dependencyCheck {
  suppressionFile = 'config/owasp/suppressions.xml'
}

def static getCheckedOutGitCommitHash() {
  'git rev-parse --verify --short HEAD'.execute().text.trim()
}

task contract(type: Test, description: 'Runs contract tests.', group: 'Verification') {
  testClassesDirs = sourceSets.contractTest.output.classesDirs
  classpath = sourceSets.contractTest.runtimeClasspath
}

task runAndPublishConsumerPactTests(type: Test) {
  testClassesDirs = sourceSets.contractTest.output.classesDirs
  classpath = sourceSets.contractTest.runtimeClasspath
  include "uk/gov/hmcts/reform/hmc/consumer/**"
}

runAndPublishConsumerPactTests.finalizedBy pactPublish

task runProviderPactVerification(type:Test) {
  description = "Runs provider pact Tests"
  useJUnitPlatform()
  testClassesDirs = sourceSets.contractTest.output.classesDirs
  classpath = sourceSets.contractTest.runtimeClasspath
  systemProperty 'pact.verifier.publishResults', System.getProperty('pact.verifier.publishResults')
  systemProperty 'pact.provider.version', project.pactVersion
  include "uk/gov/hmcts/reform/hmc/provider/**"
  include "uk/gov/hmcts/reform/hmc/controllers/**"
}

runProviderPactVerification.finalizedBy pactVerify

cucumberReports {
  outputDir = file("${projectDir}/target/cucumber")
  reports = files("${projectDir}/target/cucumber.json")
  notFailingStatuses = ["skipped", "passed"]
}

repositories {
  mavenLocal()
  mavenCentral()
  gradlePluginPortal()
  maven {
    url "https://jitpack.io"
  }
}

dependencyManagement {
  imports {
    mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
  }
}

ext.libraries = [
  junit5: [
    "org.junit.jupiter:junit-jupiter-api:${junit}",
    "org.junit.jupiter:junit-jupiter-engine:${junit}",
    "org.junit.jupiter:junit-jupiter-params:${junit}",
    "org.junit.platform:junit-platform-commons:${junitPlatform}",
    "org.junit.platform:junit-platform-engine:${junitPlatform}",
    "org.apiguardian:apiguardian-api:1.0.0"
  ]
]

dependencies {

  // Spring Dependencies
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-cache'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-oauth2-client'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-oauth2-resource-server'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'

  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign'
  implementation group: 'org.springframework.security', name: 'spring-security-config'
  implementation group: 'org.springframework.security', name: 'spring-security-core'
  implementation group: 'org.springframework.security', name: 'spring-security-oauth2-jose'
  implementation group: 'org.springframework.security', name: 'spring-security-rsa'
  implementation group: 'org.springframework.security', name: 'spring-security-web'

  implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.6.0'

  // HMCTS libraries
  implementation group: 'com.github.hmcts', name: 'service-auth-provider-java-client', version: '5.3.0'
  implementation group: 'com.github.hmcts', name: 'idam-java-client', version: '3.0.3'
  implementation group: 'com.github.hmcts.java-logging', name: 'logging-appinsights', version: '6.1.7'


  implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.5.12'
  implementation group: 'ch.qos.logback', name: 'logback-core', version: '1.5.12'

  implementation group: 'jakarta.inject', name: 'jakarta.inject-api', version: '2.0.1'
  implementation group: 'jakarta.el', name: 'jakarta.el-api', version: '6.0.1'

  implementation group: 'com.fasterxml.woodstox', name: 'woodstox-core', version: '7.1.0'
  implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.12.6'
  implementation group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.12.6'
  implementation group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.12.6'
  implementation group: 'net.minidev', name: 'json-smart', version: '2.5.1'
  implementation group: 'com.auth0', name: 'java-jwt', version: '4.4.0'

  implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.17.0'
  implementation group: 'org.apache.commons', name: 'commons-collections4', version: '4.4'
  implementation group: 'org.apache.httpcomponents.client5', name: 'httpclient5', version: '5.2.3'
  implementation group: 'commons-fileupload', name: 'commons-fileupload', version: '1.5'
  implementation group: 'commons-io', name: 'commons-io', version: '2.17.0'

  implementation group: 'org.flywaydb', name: 'flyway-core', version: '8.5.13'
  runtimeOnly group: 'org.postgresql', name: 'postgresql', version: '42.7.4'
  compileOnly group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib', version: '1.3.21'

  implementation group: 'com.nimbusds', name: 'nimbus-jose-jwt', version: '9.41.2'

  implementation group: 'org.projectlombok', name: 'lombok', version: lombok
  implementation group: 'org.mapstruct', name: 'mapstruct', version: mapstruct
  implementation group: 'org.mapstruct', name: 'mapstruct-jdk8', version: '1.3.1.Final'

  annotationProcessor group: 'org.projectlombok', name: 'lombok', version: lombok
  annotationProcessor group: 'org.mapstruct', name: 'mapstruct-processor', version: mapstruct
  annotationProcessor group: 'org.projectlombok', name: 'lombok-mapstruct-binding', version: '0.2.0'

  implementation group: 'com.azure', name: 'azure-messaging-servicebus', version: '7.17.4'
  implementation group: 'com.azure', name: 'azure-core', version: '1.52.0'
  implementation group: 'com.azure', name: 'azure-core-amqp', version: '2.9.9'

  testImplementation libraries.junit5
  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'
  testImplementation group: 'org.mockito', name: 'mockito-inline', version: '3.11.1'
  testImplementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-contract-stub-runner', version: '4.1.4'
  testImplementation group: 'org.powermock', name: 'powermock-api-mockito2', version: '2.0.9'
  testImplementation group: 'org.powermock', name: 'powermock-module-junit4', version: '2.0.9'
  testImplementation group: 'com.github.hmcts', name: 'ccd-test-definitions', version: '7.24.2'
  testImplementation group: 'com.github.hmcts', name: 'befta-fw', version: '9.2.0'
  testImplementation group: 'com.github.hmcts', name: 'fortify-client', version: '1.4.6'
  testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: lombok
  testAnnotationProcessor group: 'org.mapstruct', name: 'mapstruct-processor', version: mapstruct
  testAnnotationProcessor group: 'org.projectlombok', name: 'lombok-mapstruct-binding', version: '0.2.0'

  contractTestImplementation sourceSets.main.runtimeClasspath
  contractTestImplementation sourceSets.test.runtimeClasspath
  contractTestImplementation group: 'au.com.dius.pact.consumer', name: 'java8', version: diuspactproviderVersion
  contractTestImplementation group: 'au.com.dius.pact.consumer', name: 'junit5', version: diuspactproviderVersion
  contractTestImplementation group: 'au.com.dius.pact.provider', name: 'junit5', version: diuspactproviderVersion
  contractTestImplementation group: 'au.com.dius.pact.provider', name: 'spring', version: diuspactproviderVersion
  contractTestImplementation group: 'au.com.dius.pact.provider', name: 'junit5spring', version: diuspactproviderVersion
  contractTestAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: lombok

  integrationTestImplementation sourceSets.main.runtimeClasspath
  integrationTestImplementation sourceSets.test.runtimeClasspath
  integrationTestImplementation group: 'com.github.tomakehurst', name: 'wiremock', version: '2.27.2'
  integrationTestImplementation group: 'org.testcontainers', name: 'postgresql', version: testcontainers
  integrationTestAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: lombok

  functionalTestImplementation sourceSets.main.runtimeClasspath
  functionalTestImplementation sourceSets.test.runtimeClasspath

  cftlibImplementation sourceSets.main.runtimeClasspath
  cftlibImplementation sourceSets.test.runtimeClasspath
  cftlibImplementation group: 'org.springframework.boot', name: 'spring-boot-devtools'

}

bootJar {
  getArchiveFileName().set(provider {
    'hmc-cft-hearing-service.jar'
  })

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

jar {
  enabled = false
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}

// Gradle 7.x issue, workaround from: https://github.com/gradle/gradle/issues/17236#issuecomment-894768083
rootProject.tasks.named("processIntegrationTestResources") {
  duplicatesStrategy = 'include'
}

rootProject.tasks.named("processFunctionalTestResources") {
  duplicatesStrategy = 'include'
}

rootProject.tasks.named("processContractTestResources") {
  duplicatesStrategy = 'include'
}

pact {
  publish {
    pactDirectory = 'build/pacts'
    pactBrokerUrl = System.getenv("PACT_BROKER_URL") ?: 'http://localhost:80'
    tags = [System.getenv("PACT_BRANCH_NAME") ?: 'Dev']
    version = '0.0.1'
  }
}

task loadEnvSecrets() {
  doLast {
    if (!project.file('./.demo-env').exists()) {
      new ByteArrayOutputStream().withStream { os ->
        exec {
          commandLine 'az', 'keyvault', 'secret', 'show', '--vault-name', 'hmc-demo', '-o', 'tsv', '--query', 'value', '--name', 'hmc-local-env-config'
          standardOutput = os
        }
        project.file('./.demo-env').write(new String(os.toString().replace('\n', '').decodeBase64(), java.nio.charset.StandardCharsets.UTF_8))
      }
    }
  }
}

task reloadEnvSecrets(dependsOn: [loadEnvSecrets]) {
  doFirst {
    if (project.file('./.demo-env').exists()) {
      project.file('./.demo-env').delete()
    }
  }
}

bootWithCCD {
  dependsOn(loadEnvSecrets)

  doFirst() {
    project.file('./.demo-env').readLines().each() {
      def index = it.indexOf("=")
      def key = it.substring(0, index)
      def value = it.substring(index + 1)
      environment(key, value)
    }
  }

  authMode = uk.gov.hmcts.rse.AuthMode.Local

  environment("RSE_LIB_ADDITIONAL_DATABASES", "hmc");
  environment("CFT_HEARING_SERVICE_DB_USERNAME", "postgres")
  environment("CFT_HEARING_SERVICE_DB_PASSWORD", "postgres")
  environment("CFT_HEARING_SERVICE_DB_PORT", "6432")
  environment("CFT_HEARING_SERVICE_DB_NAME", "hmc")
  environment("S2S_URL", "http://localhost:8489")
  environment("HMC_ACCESS_CONTROL_ENABLED", "false")
}

task fortifyScan(type: JavaExec)  {
  mainClass = "uk.gov.hmcts.fortifyclient.FortifyClientMainApp"
  classpath += sourceSets.test.runtimeClasspath
  jvmArgs = ['--add-opens=java.base/java.lang.reflect=ALL-UNNAMED']
  // The line below prevents the build from failing if the Fortify scan detects issues
  ignoreExitValue = true
}
