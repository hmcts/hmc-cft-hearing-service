#!groovy
import uk.gov.hmcts.contino.AppPipelineDsl
properties(
    [
        [
            $class       : 'GithubProjectProperty',
            projectUrlStr: 'https://github.com/hmcts/hmc-cft-hearing-service'
        ],
        pipelineTriggers([[$class: 'GitHubPushTrigger']])
    ]
)

@Library("Infrastructure")

import uk.gov.hmcts.contino.GradleBuilder

def type = "java"
def product = "hmc"
def component = "cft-hearing-service"
def branchesToSync = ['demo', 'ithc', 'perftest']

// Variables to switch pipeline logic and wiring per type of build
def definitionStoreDevelopPr = "PR-575"  // This doesn't change frequently, but when it does, only change this value.
// Variables to switch pipeline logic and wiring per type of build
def dataStoreApiDevelopPr    = "PR-1260" // This doesn't change frequently, but when it does, only change this value.

GradleBuilder builder = new GradleBuilder(this, product)

def secrets = [
  'rpx-${env}': [
    secret('mc-idam-client-secret', 'BEFTA_OAUTH2_CLIENT_SECRET_OF_XUIWEBAPP')
  ],
  'ccd-${env}': [
    secret('ccd-api-gateway-oauth2-client-secret', 'OAUTH2_CLIENT_SECRET'),
    secret('definition-importer-username', 'DEFINITION_IMPORTER_USERNAME'),
    secret('definition-importer-password', 'DEFINITION_IMPORTER_PASSWORD'),
    secret('ccd-caseworker-autotest-password', 'CCD_CASEWORKER_AUTOTEST_PASSWORD')
  ],
  'hmc-${env}': [
    secret('hmc-servicebus-connection-string', 'HMC_SERVICE_BUS_CONNECTION_STRING'),
    secret('hmc-queue-connection-string', 'HMC_QUEUE_CONNECTION_STRING'),
    secret('hmc-outbound-queue-connection-string', 'HMC_OUTBOUND_QUEUE_CONNECTION_STRING'),
    secret('hmc-fta-password', 'HMC_FTA_PASSWORD'),
    secret('hmc-hearing-service-users-pwd', 'HMC_HEARING_SERVICE_USERS_PWD'),

  ],
  's2s-${env}': [
    secret('microservicekey-ccd-data', 'BEFTA_S2S_CLIENT_SECRET_OF_CCD_DATA'),
    secret('microservicekey-ccd-gw', 'CCD_API_GATEWAY_S2S_KEY'),
    secret('microservicekey-ccd-gw', 'BEFTA_S2S_CLIENT_SECRET'),
    secret('microservicekey-aac-manage-case-assignment', 'BEFTA_S2S_CLIENT_SECRET_OF_AAC_MANAGE_CASE_ASSIGNMENT'),
    secret('microservicekey-xui-webapp', 'BEFTA_S2S_CLIENT_SECRET_OF_XUI_WEBAPP')
  ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [$class     : 'AzureKeyVaultSecret',
   secretType : 'Secret',
   name       : secretName,
   version    : '',
   envVariable: envVar
  ]
}
// env variables needed for BEFTA.
//env.IDAM_URL = "https://idam-api.aat.platform.hmcts.net"
env.IDAM_API_URL_BASE = "https://idam-api.aat.platform.hmcts.net"
//env.S2S_URL = "http://rpe-service-auth-provider-aat.service.core-compute-aat.internal"
env.S2S_URL_BASE = "http://rpe-service-auth-provider-aat.service.core-compute-aat.internal"
env.BEFTA_S2S_CLIENT_ID = "ccd_gw"
env.BEFTA_RESPONSE_HEADER_CHECK_POLICY="JUST_WARN"
env.PACT_BROKER_FULL_URL = 'https://pact-broker.platform.hmcts.net'

env.DEFINITION_STORE_URL_BASE = "https://ccd-definition-store-api-${definitionStoreDevelopPr}.service.core-compute-preview.internal".toLowerCase()

env.HMC_SERVICE_BUS_TOPIC = "hmc-to-cft"
env.HMC_SERVICE_BUS_SUBSCRIPTION = "hmc-subs-to-cft"
env.HMC_SERVICE_BUS_QUEUE = "hmc-from-hmi"
env.HMC_OUTBOUND_SERVICE_BUS_QUEUE = "hmc-to-hmi"





//----------------
// vars needed for functional tests
// Assume a feature build branched off 'develop', with dependencies develop-to-develop.
env.DEFINITION_STORE_URL_BASE = "https://ccd-definition-store-api-${definitionStoreDevelopPr}.service.core-compute-preview.internal".toLowerCase()
env.CCD_DATA_STORE_API_BASE_URL = "http://ccd-test-stubs-service-aat.service.core-compute-aat.internal"
env.MCA_API_BASE_URL = "https://aac-manage-case-assignment-${env.BRANCH_NAME}.service.core-compute-preview.internal".toLowerCase()

// Other env variables needed for BEFTA.
env.S2S_URL_BASE = "http://rpe-service-auth-provider-aat.service.core-compute-aat.internal"
env.IDAM_API_URL_BASE = "https://idam-api.aat.platform.hmcts.net"
//env.BEFTA_S2S_CLIENT_ID = "xui_webapp"
env.CCD_API_GATEWAY_OAUTH2_CLIENT_ID = "ccd_gateway"
env.CCD_API_GATEWAY_OAUTH2_REDIRECT_URL = "https://www-ccd.aat.platform.hmcts.net/oauth2redirect"
env.DM_STORE_BASE_URL = "http://dm-store-aat.service.core-compute-aat.internal"
env.RD_PROFESSIONAL_API_BASE_URL = "http://rd-professional-api-aat.service.core-compute-aat.internal"
env.CCD_API_GATEWAY_S2S_ID = "ccd_gw"
env.BEFTA_S2S_CLIENT_ID = "ccd_gw"
env.BEFTA_S2S_CLIENT_ID_OF_XUI_WEBAPP = "xui_webapp"
env.BEFTA_S2S_CLIENT_ID_OF_CCD_DATA = "ccd_data"
env.BEFTA_OAUTH2_CLIENT_ID_OF_XUIWEBAPP = "xuiwebapp"
env.BEFTA_OAUTH2_REDIRECT_URI_OF_XUIWEBAPP = "https://www-ccd.aat.platform.hmcts.net/oauth2redirect"
env.BEFTA_OAUTH2_ACCESS_TOKEN_TYPE_OF_XUIWEBAPP = "OIDC"
env.BEFTA_OAUTH2_SCOPE_VARIABLES_OF_XUIWEBAPP = "profile openid roles manage-user create-user search-user"

// temporary workaround for platform changes: turn BEFTA header checks to warning mode
env.BEFTA_RESPONSE_HEADER_CHECK_POLICY="JUST_WARN"

//-----------------

withPipeline(type, product, component) {
  syncBranchesWithMaster(branchesToSync)
  loadVaultSecrets(secrets)
  enableAksStagingDeployment()
  disableLegacyDeployment()

  enablePactAs([
    AppPipelineDsl.PactRoles.CONSUMER,
    AppPipelineDsl.PactRoles.PROVIDER
  ])

  after('test') {
    builder.gradle('integration')
    // hmcts/cnp-jenkins-library may fail to copy artifacts after checkstyle error so repeat command (see /src/uk/gov/hmcts/contino/GradleBuilder.groovy)
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/reports/checkstyle/*.html'
  }

  after('smoketest:preview') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/BEFTA Report for Smoke Tests/**/*'
  }

  after('smoketest:aat') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/BEFTA Report for Smoke Tests/**/*'
  }

  after('functionalTest:preview') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/BEFTA Report for Functional Tests/**/*'
  }

  after('functionalTest:aat') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/BEFTA Report for Functional Tests/**/*'
  }
}
